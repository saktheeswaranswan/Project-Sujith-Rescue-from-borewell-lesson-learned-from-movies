# slope_rescue_pygame.py
# Python/Pygame port of the p5.js "Slope Rescue — draggable rescuers"
# Controls:
#   - Mouse: drag a rescuer's hand (small dark dot to the right of each rescuer) along the slope to pull rope
#   - SPACE: toggle force-driven pulling mode (on/off)
#   - F: toggle force vectors visibility
#   - R: randomize forces (affects force-mode only)
#   - ESC / Close window: quit
#
# Requires: pygame (pip install pygame)

import math
import random
import pygame

# --------------------- Config ---------------------
W, H = 1100, 700
FPS = 60

RESCUER_COUNT = 8
SLOPE_ANGLE_DEG = 30
SLOPE_LENGTH = 700
SLOPE_BASE_X = 150
SLOPE_BASE_Y = H - 80

GRAVITY = 9.8
TIME_STEP = 1.0 / FPS
FRICTION_COEFF = 0.3

PULLEY_OFFSET_Y = 80
PULLEY_DIAM = 48
HAND_OFFSET = (18, -18)
DRAG_RADIUS = 24
PULLEY_EFFICIENCY = 0.92

# Visual tuning
FORCE_TO_SPEED = 0.06   # px per (N*s) when net > 0
SLIP_FACTOR = 0.02      # px per (N*s) when net <= 0
SUCCESS_OVERLAY_FRAMES = 180

# --------------------- Init ---------------------
pygame.init()
screen = pygame.display.set_mode((W, H))
pygame.display.set_caption("Slope Rescue — Pygame")
clock = pygame.time.Clock()
font_small = pygame.font.SysFont(None, 18)
font_med = pygame.font.SysFont(None, 24)
font_big = pygame.font.SysFont(None, 48)

# Colors
COL_BG = (220, 220, 220)
COL_SLOPE = (80, 80, 80)
COL_ROPE = (90, 50, 20)
COL_PULLEY = (180, 180, 180)
COL_PULLEY_STROKE = (60, 60, 60)
COL_FORCE = (200, 30, 30)
COL_HAND = (80, 80, 80)
COL_TEXT = (0, 0, 0)
COL_OVERLAY = (0, 180, 60, 200)
COL_MARKER = (40, 120, 200)
COL_HEAD = (230, 80, 80)
COL_STICK = (200, 30, 30)

# Math helpers
def radians(deg): return math.radians(deg)
def degrees(rad): return math.degrees(rad)
def clamp(x, a, b): return max(a, min(b, x))
def lerp(a, b, t): return a + (b - a) * t
def map_val(x, a1, a2, b1, b2):
    if a2 - a1 == 0: return b1
    t = (x - a1) / (a2 - a1)
    return b1 + t * (b2 - b1)

slope_angle = radians(SLOPE_ANGLE_DEG)
ux = math.cos(slope_angle)
uy = -math.sin(slope_angle)

pulley_pos = pygame.math.Vector2(
    SLOPE_BASE_X + ux * SLOPE_LENGTH,
    SLOPE_BASE_Y + uy * SLOPE_LENGTH - PULLEY_OFFSET_Y
)

# --------------------- Entities ---------------------
class Rescuer:
    def __init__(self, idx, s, force=50):
        self.id = idx
        self.s = s
        self.prev_s = s
        self.force = force
        self.x, self.y = slope_point_from_s(s)

    @property
    def hand_pos(self):
        return (self.x + HAND_OFFSET[0], self.y + HAND_OFFSET[1])

def slope_point_from_s(s):
    return (
        SLOPE_BASE_X + ux * s,
        SLOPE_BASE_Y + uy * s
    )

def s_from_point(px, py):
    vx = px - SLOPE_BASE_X
    vy = py - SLOPE_BASE_Y
    s = vx * ux + vy * uy
    return clamp(s, 0, SLOPE_LENGTH)

# Create rescuers clustered in lower half (like original)
rescuers = []
for i in range(RESCUER_COUNT):
    s = (i + 0.5) / RESCUER_COUNT * (SLOPE_LENGTH * 0.6)
    rescuers.append(Rescuer(i + 1, s, force=50))

# Man + rope state
man = {
    "mass": 80.0,
    "y_norm": 0.0,  # 0 bottom -> 1 rim
    "vel": 0.0
}

man_height_at_pulley = pulley_pos.y + 100   # rim top y
man_bottom_depth = pulley_pos.y + 380       # bottom y

rope_max_len = man_bottom_depth - (pulley_pos.y + 20)
rope_min_len = man_height_at_pulley - (pulley_pos.y + 20)
rope_vertical_len = rope_max_len
rope_total_pulled = 0.0
rope_max_pullable = rope_max_len - rope_min_len
rope_visual_progress = 0.0

# Interaction flags
dragging_idx = -1
pulling = False
show_forces = True
success_timer = 0

# --------------------- Simulation ---------------------
def compute_total_tension():
    total = sum(r.force for r in rescuers)
    return total * PULLEY_EFFICIENCY

def simulate_force_driven_pull():
    global rope_vertical_len, rope_total_pulled
    total_tension = compute_total_tension()
    weight = man["mass"] * GRAVITY
    friction_loss = FRICTION_COEFF * man["mass"] * GRAVITY
    net = total_tension - weight - friction_loss

    if net > 0:
        delta = -net * FORCE_TO_SPEED * TIME_STEP
    else:
        delta = -net * SLIP_FACTOR * TIME_STEP

    prev = rope_vertical_len
    rope_vertical_len = clamp(rope_vertical_len + delta, rope_min_len, rope_max_len)
    pulled_delta = prev - rope_vertical_len
    rope_total_pulled = clamp(rope_total_pulled + pulled_delta, 0, rope_max_pullable)

def handle_rescuer_motion_pulling():
    global rope_total_pulled, rope_vertical_len
    total_pos_ds = 0.0
    total_neg_ds = 0.0
    for r in rescuers:
        ds = r.s - r.prev_s
        if ds > 0: total_pos_ds += ds
        elif ds < 0: total_neg_ds += -ds
        r.prev_s = r.s

    if total_pos_ds > 0:
        rope_total_pulled = clamp(rope_total_pulled + total_pos_ds, 0, rope_max_pullable)
    if total_neg_ds > 0:
        rope_total_pulled = clamp(rope_total_pulled - total_neg_ds, 0, rope_max_pullable)

    rope_vertical_len = clamp(rope_max_len - rope_total_pulled, rope_min_len, rope_max_len)

def update_man_from_rope():
    global rope_vertical_len, rope_total_pulled, success_timer
    target_y_norm = map_val(rope_vertical_len, rope_max_len, rope_min_len, 0.0, 1.0)
    stiffness = 8.0
    damping = 0.88
    error = target_y_norm - man["y_norm"]
    accel = stiffness * error
    man["vel"] += accel * TIME_STEP
    man["vel"] *= damping
    man["y_norm"] += man["vel"] * TIME_STEP
    man["y_norm"] = clamp(man["y_norm"], 0.0, 1.0)

    if man["y_norm"] >= 1.0:
        man["y_norm"] = 1.0
        success_timer = SUCCESS_OVERLAY_FRAMES
        # lock rope to rim
        rope_total_pulled = rope_max_pullable
        rope_vertical_len = rope_min_len

    # keep rope synced to man (if physics nudges him)
    rope_vertical_len = clamp(
        map_val(man["y_norm"], 0.0, 1.0, rope_max_len, rope_min_len),
        rope_min_len, rope_max_len
    )

# --------------------- Drawing ---------------------
def draw_text(surf, txt, pos, font=font_small, col=COL_TEXT, center=False):
    img = font.render(txt, True, col)
    r = img.get_rect()
    if center:
        r.center = pos
    else:
        r.topleft = pos
    surf.blit(img, r)

def draw_scenery(surf):
    # sky
    pygame.draw.rect(surf, (150, 200, 255), (0, 0, W, int(H * 0.6)))

    # distant mountains
    pygame.draw.polygon(surf, (120,130,140), [(0, int(H*0.6)), (180, 120), (360, int(H*0.6))])
    pygame.draw.polygon(surf, (120,130,140), [(260, int(H*0.6)), (500, 80), (740, int(H*0.6))])
    pygame.draw.polygon(surf, (120,130,140), [(640, int(H*0.6)), (860, 140), (1030, int(H*0.6))])

    # slope texture: draw short strokes roughly along -y direction in slope-local frame
    # We approximate by stepping along the slope and drawing small jittered lines toward "uphill"
    for i in range(0, SLOPE_LENGTH, 22):
        x = SLOPE_BASE_X + ux * i
        y = SLOPE_BASE_Y + uy * i
        jitter_x = random.uniform(-6, 6)
        len_y = random.uniform(10, 50)
        # direction roughly perpendicular in screen coords (not exact rotation)
        # We'll just draw a short segment going "up" visually
        pygame.draw.line(surf, (110, 90, 60), (x, y), (x + jitter_x, y - len_y), 1)

def draw_slope(surf):
    x1, y1 = SLOPE_BASE_X, SLOPE_BASE_Y
    x2 = SLOPE_BASE_X + ux * SLOPE_LENGTH
    y2 = SLOPE_BASE_Y + uy * SLOPE_LENGTH
    pygame.draw.line(surf, COL_SLOPE, (x1, y1), (x2, y2), 3)

def draw_pulley_and_rope(surf):
    # pulley
    pygame.draw.circle(surf, COL_PULLEY, (int(pulley_pos.x), int(pulley_pos.y)), PULLEY_DIAM//2)
    pygame.draw.circle(surf, COL_PULLEY_STROKE, (int(pulley_pos.x), int(pulley_pos.y)), PULLEY_DIAM//2, 2)

    # rope from each rescuer hand to pulley
    for r in rescuers:
        hx, hy = r.hand_pos
        pygame.draw.line(surf, COL_ROPE, (hx, hy), (pulley_pos.x, pulley_pos.y), 2)

    # vertical rope
    man_top_y = pulley_pos.y + 20 + rope_vertical_len
    pygame.draw.line(surf, COL_ROPE, (pulley_pos.x, pulley_pos.y + 20), (pulley_pos.x, man_top_y), 4)

    # progress marker on slope
    global rope_visual_progress
    rope_visual_progress = clamp(map_val(rope_total_pulled, 0, rope_max_pullable, 0, SLOPE_LENGTH), 0, SLOPE_LENGTH)
    marker_x = SLOPE_BASE_X + ux * rope_visual_progress
    marker_y = SLOPE_BASE_Y + uy * rope_visual_progress
    pygame.draw.circle(surf, COL_MARKER, (int(marker_x), int(marker_y - 8)), 6)

    # thicker rope segment from marker to pulley
    pygame.draw.line(surf, (60, 40, 20), (marker_x, marker_y), (pulley_pos.x, pulley_pos.y), 3)

def draw_rescuer(surf, r: Rescuer, blink=True):
    # body position
    r.x, r.y = slope_point_from_s(r.s)

    # stick figure
    # head
    pygame.draw.circle(surf, COL_HEAD, (int(r.x), int(r.y - 28)), 12)
    # body
    pygame.draw.line(surf, COL_STICK, (r.x, r.y - 16), (r.x, r.y + 6), 2)
    # legs
    pygame.draw.line(surf, COL_STICK, (r.x, r.y - 6), (r.x - 10, r.y + 18), 2)
    pygame.draw.line(surf, COL_STICK, (r.x, r.y - 6), (r.x + 10, r.y + 18), 2)
    # arm toward pulley
    pygame.draw.line(surf, COL_STICK, (r.x, r.y - 20), (r.x + 18, r.y - 18), 2)

    # hand (drag target)
    hx, hy = r.hand_pos
    pygame.draw.circle(surf, COL_HAND, (int(hx), int(hy)), 5)

    # id label
    draw_text(surf, str(r.id), (r.x - 8, r.y - 60), font_small)

    # force arrow
    if show_forces:
        mag = r.force
        if mag > 0 and (not pulling or blink):
            fx0, fy0 = r.x, r.y - 14
            dir_vec = pygame.math.Vector2(pulley_pos.x - fx0, pulley_pos.y - fy0)
            if dir_vec.length() > 1e-6:
                dir_unit = dir_vec.normalize()
                draw_len = map_val(mag, 0, 120, 0, 110)
                tip = pygame.math.Vector2(fx0, fy0) + dir_unit * draw_len
                pygame.draw.line(surf, COL_FORCE, (fx0, fy0), tip, 2)
                # arrowhead
                perp = pygame.math.Vector2(-dir_unit.y, dir_unit.x)
                base = tip - dir_unit * 8
                left = base + perp * 6
                right = base - perp * 6
                pygame.draw.line(surf, COL_FORCE, tip, left, 2)
                pygame.draw.line(surf, COL_FORCE, tip, right, 2)
        # magnitude label
        draw_text(surf, f"{mag:.0f} N", (r.x + 12, r.y - 8), font_small)

def draw_man(surf):
    # map rope length to actual y
    man_y = map_val(rope_vertical_len, rope_max_len, rope_min_len, man_bottom_depth, man_height_at_pulley)

    # borewell rim ellipse (approx with pygame ellipse)
    rim_rect = pygame.Rect(0, 0, 120, 40)
    rim_rect.center = (int(pulley_pos.x), int(man_height_at_pulley + 30))
    pygame.draw.ellipse(surf, (0,0,0), rim_rect, 2)

    # shaft rectangle
    shaft_rect = pygame.Rect(int(pulley_pos.x - 60), int(man_height_at_pulley + 30), 120, int(man_bottom_depth - man_height_at_pulley + 60))
    pygame.draw.rect(surf, (30,30,30), shaft_rect)

    # inner top shading
    pygame.draw.ellipse(surf, (20,20,20), rim_rect)

    # man stick/body
    x = int(pulley_pos.x)
    y = int(man_y)
    pygame.draw.line(surf, COL_ROPE, (x, y - 24), (x, y - 6), 2)
    pygame.draw.circle(surf, (150, 40, 40), (x, y + 10), 15)  # head
    pygame.draw.line(surf, COL_ROPE, (x, y + 25), (x, y + 50), 2)
    pygame.draw.line(surf, COL_ROPE, (x, y + 40), (x - 10, y + 60), 2)
    pygame.draw.line(surf, COL_ROPE, (x, y + 40), (x + 10, y + 60), 2)

    # labels
    draw_text(surf, "BOREWELL", (pulley_pos.x - 40, man_bottom_depth + 120), font_small, (255,255,255))
    if not pulling:
        draw_text(surf, "Pull paused (or drag rescuers to pull)", (pulley_pos.x - 150, man_bottom_depth + 20), font_med)
    else:
        total_pull = compute_total_tension()
        net = total_pull - man["mass"] * GRAVITY - (FRICTION_COEFF * man["mass"] * GRAVITY)
        draw_text(surf, f"Net vertical force: {net:.1f} N", (pulley_pos.x - 100, man_bottom_depth + 20), font_med)

def draw_hud(surf):
    draw_text(surf, "Slope Rescue — drag rescuers up the slope to pull rope and lift the man", (20, 10), font_med)
    draw_text(surf, f"Slope angle: {SLOPE_ANGLE_DEG:.1f}°", (20, 36))
    draw_text(surf, f"Total team members: {RESCUER_COUNT}", (20, 56))
    total_pull = compute_total_tension()
    man_weight = man["mass"] * GRAVITY
    draw_text(surf, f"Total effective team pull (force-mode): {total_pull:.1f} N", (20, 84))
    draw_text(surf, f"Man weight: {man_weight:.1f} N", (20, 104))
    draw_text(surf, f"Man height: {(man['y_norm']*100):.1f} % (0=deep,100=rim)", (20, 124))
    draw_text(surf, "SPACE: start/stop force-mode  |  F: toggle force vectors  |  R: randomize forces", (20, 150))

def draw_success_overlay(surf, frames_left):
    overlay = pygame.Surface((W, H), pygame.SRCALPHA)
    overlay.fill(COL_OVERLAY)
    surf.blit(overlay, (0,0))
    txt = "RESCUED! — MAN IS SAFE"
    img = font_big.render(txt, True, (255,255,255))
    rect = img.get_rect(center=(W//2, H//2))
    surf.blit(img, rect)

# --------------------- Main Loop ---------------------
running = True
while running:
    dt = clock.tick(FPS) / 1000.0  # (not used, fixed TIME_STEP for consistency)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_f:
                show_forces = not show_forces
            elif event.key == pygame.K_SPACE:
                pulling = not pulling
            elif event.key == pygame.K_r:
                for r in rescuers:
                    r.force = random.randint(10, 110)

        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            mx, my = pygame.mouse.get_pos()
            dragging_idx = -1
            for i, r in enumerate(rescuers):
                hx, hy = r.hand_pos
                if math.hypot(mx - hx, my - hy) <= DRAG_RADIUS:
                    dragging_idx = i
                    break

        elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            dragging_idx = -1

        elif event.type == pygame.MOUSEMOTION and dragging_idx >= 0:
            mx, my = pygame.mouse.get_pos()
            s = s_from_point(mx, my)
            s = clamp(s, 0, SLOPE_LENGTH)
            rescuers[dragging_idx].s = s

    # --- Simulation steps ---
    if pulling:
        simulate_force_driven_pull()

    handle_rescuer_motion_pulling()
    update_man_from_rope()

    # --- Drawing ---
    screen.fill(COL_BG)
    draw_scenery(screen)
    draw_slope(screen)
    draw_pulley_and_rope(screen)

    blink = (not pulling) or (pygame.time.get_ticks() // 500) % 2 == 0
    for r in rescuers:
        draw_rescuer(screen, r, blink=blink)

    draw_man(screen)
    draw_hud(screen)

    if success_timer > 0:
        draw_success_overlay(screen, success_timer)
        success_timer -= 1

    pygame.display.flip()

pygame.quit()
